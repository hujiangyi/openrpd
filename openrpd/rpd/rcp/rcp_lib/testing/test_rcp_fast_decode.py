# time PYTHONPATH=$(pwd) py.test rpd/rcp/rcp_lib/testing/test_rcp_fast_decode.py
# time PYTHONPATH=$(pwd) ENABLE_FUZZING=1 py.test rpd/rcp/rcp_lib/testing/test_rcp_fast_decode.py
# time PYTHONPATH=$(pwd) X=10000 py.test rpd/rcp/rcp_lib/testing/test_rcp_fast_decode.py::TestFastDecode::test_fast_decode  --profile
# time PYTHONPATH=$(pwd) X=10000 py.test rpd/rcp/rcp_lib/testing/test_rcp_fast_decode.py::TestFastDecode::test_fast_decode2 --profile
#
import os
import unittest
from rpd.rcp.gcp.gcp_lib import gcp_msg_def, gcp_object
from rpd.rcp.rcp_lib import rcp_tlv_def
from rpd.rcp.rcp_lib.rcp import RCPSequence
from rpd.gpb.cfg_pb2 import config
from rpd.gpb import rcp_pb2

#
# These are real IRA/REX sequences taken from network dumps
# Ideally would be to use testdata/*.yaml dumps taken from
# network captures to have it fully data driven.
#
data_ira = [
    # Read
    bytearray([
        0x32, 0x01, 0x17, 0x01, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05,
        0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x09, 0x00, 0x00, 0x0a, 0x00,
        0x00, 0x0b, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0d,
        0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x12, 0x00,
        0x00, 0x13, 0x00, 0x39, 0x01, 0x00, 0x00, 0x02,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x05, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x09, 0x00, 0x00, 0x0a,
        0x00, 0x00, 0x0b, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x0d, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00,
        0x00, 0x10, 0x00, 0x00, 0x13, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x15, 0x00, 0x00, 0x14, 0x00, 0x0f,
        0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x15,
        0x00, 0x18, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x08,
        0x00, 0x00, 0x16, 0x00, 0x12, 0x01, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00,
        0x00, 0x05, 0x00, 0x00, 0x06, 0x00, 0x00, 0x17,
        0x00, 0x12, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x09, 0x01,
        0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x19, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x1b, 0x00,
        0x00, 0x1c, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x1e,
        0x00, 0x00, 0x1f, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x21, 0x00, 0x00, 0x23, 0x00, 0x00, 0x24, 0x00,
        0x00, 0x26, 0x00, 0x00, 0x27, 0x00, 0x00, 0x28,
        0x00, 0x00, 0x29, 0x00, 0x00, 0x2a, 0x00, 0x00,
        0x2b, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x2d, 0x00,
        0x00, 0x2e, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x30,
        0x00, 0x00
    ]),
    # Allocate Write
    bytearray([
        0x3c, 0x00, 0x45, 0x01, 0x00, 0x01, 0x0e, 0x02,
        0x00, 0x06, 0x2c, 0x31, 0x24, 0x60, 0xa9, 0x9a,
        0x03, 0x00, 0x10, 0xfd, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x01, 0x05,
        0x00, 0x08, 0x43, 0x43, 0x41, 0x50, 0x43, 0x4f,
        0x52, 0x45, 0x06, 0x00, 0x02, 0x11, 0x8b, 0x07,
        0x00, 0x01, 0x01, 0x08, 0x00, 0x01, 0x00, 0x0a,
        0x00, 0x02, 0x00, 0x00, 0x0b, 0x00, 0x01, 0x00
    ]),
]
data_rex = [
    bytearray([
        0x61, 0x00, 0x70, 0x01, 0x00, 0x01, 0x02, 0x02,
        0x00, 0x01, 0x2c, 0x03, 0x00, 0x01, 0x80, 0x04,
        0x00, 0x01, 0xff, 0x05, 0x00, 0x01, 0x80, 0x06,
        0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x4a, 0x01, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x03, 0x00, 0x01, 0x02, 0x04,
        0x00, 0x10, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x81, 0x06, 0x00, 0x01, 0x00, 0x07, 0x00,
        0x01, 0x03, 0x08, 0x00, 0x01, 0x06, 0x09, 0x00,
        0x01, 0x2f, 0x0a, 0x00, 0x01, 0x80, 0x0b, 0x00,
        0x01, 0xfc, 0x0c, 0x00, 0x01, 0x00, 0x0d, 0x00,
        0x01, 0xfc, 0x0e, 0x00, 0x01, 0x0b, 0x0f, 0x00,
        0x02, 0x01, 0x2c
    ]),
    bytearray([
        0x11, 0x00, 0xae, 0x0d, 0x00, 0x08, 0x01, 0x00,
        0x01, 0x00, 0x02, 0x00, 0x01, 0x01, 0x3d, 0x00,
        0xa0, 0x02, 0x00, 0x01, 0x02, 0x03, 0x00, 0x02,
        0x00, 0xd2, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00,
        0x02, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x07, 0x00, 0x18, 0x01, 0x00, 0x01,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x01,
        0x01, 0x05, 0x00, 0x01, 0x00, 0x07, 0x00, 0x18,
        0x01, 0x00, 0x01, 0x01, 0x02, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00,
        0x04, 0x00, 0x01, 0x01, 0x05, 0x00, 0x01, 0x00,
        0x07, 0x00, 0x18, 0x01, 0x00, 0x01, 0x02, 0x02,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x02, 0x00, 0x00, 0x04, 0x00, 0x01, 0x01, 0x05,
        0x00, 0x01, 0x00, 0x07, 0x00, 0x18, 0x01, 0x00,
        0x01, 0x03, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00,
        0x01, 0x01, 0x05, 0x00, 0x01, 0x00, 0x07, 0x00,
        0x18, 0x01, 0x00, 0x01, 0x04, 0x02, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00,
        0x00, 0x04, 0x00, 0x01, 0x01, 0x05, 0x00, 0x01,
        0x00
    ]),
    bytearray([
        0x10, 0x00, 0x66, 0x0c, 0x00, 0x0c, 0x01, 0x00,
        0x01, 0x00, 0x02, 0x00, 0x01, 0x01, 0x03, 0x00,
        0x01, 0x00, 0x3e, 0x00, 0x54, 0x01, 0x00, 0x01,
        0x02, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00,
        0x02, 0x00, 0x00, 0x05, 0x00, 0x04, 0x17, 0xd7,
        0x84, 0x00, 0x06, 0x00, 0x01, 0x02, 0x07, 0x00,
        0x01, 0x04, 0x08, 0x00, 0x01, 0x05, 0x09, 0x00,
        0x01, 0x04, 0x0a, 0x00, 0x01, 0x0a, 0x0b, 0x00,
        0x06, 0x2c, 0x31, 0x24, 0x60, 0xa9, 0x69, 0x0c,
        0x00, 0x02, 0x00, 0x95, 0x0d, 0x00, 0x02, 0x00,
        0x4e, 0x0e, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x01, 0x00, 0x10, 0x00, 0x02, 0x00,
        0x00
    ]),
    bytearray([
        0x10, 0x00, 0x2e, 0x0c, 0x00, 0x0c, 0x01, 0x00,
        0x01, 0x00, 0x02, 0x00, 0x01, 0x05, 0x03, 0x00,
        0x01, 0x00, 0x41, 0x00, 0x1c, 0x01, 0x00, 0x01,
        0x02, 0x03, 0x00, 0x01, 0x02, 0x07, 0x00, 0x04,
        0x01, 0x89, 0x79, 0xf7, 0x09, 0x00, 0x02, 0x00,
        0x00, 0x0b, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x01,
        0x01
    ]),
    bytearray([
        0x10, 0x01, 0xe7, 0x0c, 0x00, 0x0c, 0x01, 0x00,
        0x01, 0x00, 0x02, 0x00, 0x01, 0x05, 0x03, 0x00,
        0x01, 0x02, 0x16, 0x01, 0xd5, 0xc2, 0x00, 0x01,
        0xd3, 0x00, 0x00, 0x01, 0xe0, 0x2f, 0x00, 0x00,
        0x01, 0x2c, 0x31, 0x24, 0x60, 0xa9, 0x69, 0x01,
        0xc1, 0x00, 0x00, 0x03, 0x03, 0x1d, 0x00, 0x03,
        0x04, 0x02, 0x00, 0x01, 0x01, 0x20, 0x02, 0x04,
        0x01, 0xba, 0x81, 0x40, 0x0f, 0x01, 0x02, 0x10,
        0x01, 0x00, 0x03, 0x80, 0x03, 0xf0, 0x28, 0x33,
        0xeb, 0xf0, 0x28, 0x33, 0xeb, 0xf0, 0x28, 0x33,
        0xeb, 0xf0, 0x28, 0x33, 0xeb, 0xf1, 0x64, 0x28,
        0x92, 0xa9, 0x97, 0x47, 0x67, 0xda, 0x04, 0x17,
        0xbb, 0xc2, 0x75, 0x8f, 0x36, 0xff, 0x57, 0x39,
        0x35, 0x0d, 0xc1, 0x87, 0x19, 0x88, 0xd3, 0xd2,
        0x2b, 0x60, 0x3f, 0x29, 0x6b, 0x0d, 0xf3, 0xde,
        0xc0, 0xed, 0xf3, 0xde, 0xc0, 0xed, 0xf3, 0xde,
        0xc0, 0xed, 0xf3, 0xde, 0xc0, 0xed, 0xf1, 0x64,
        0x28, 0x92, 0xa9, 0x97, 0x47, 0x67, 0xda, 0x04,
        0x17, 0xbb, 0xc2, 0x75, 0x8f, 0x36, 0xff, 0x57,
        0x39, 0x35, 0x0d, 0xc1, 0x87, 0x19, 0x88, 0xd3,
        0xd2, 0x2b, 0x60, 0x3f, 0x29, 0x6b, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x2f, 0x01, 0x01,
        0x01, 0x01, 0x02, 0x01, 0x02, 0x03, 0x02, 0x00,
        0x26, 0x04, 0x02, 0x01, 0x8c, 0x05, 0x01, 0x00,
        0x06, 0x01, 0x10, 0x07, 0x02, 0x01, 0x52, 0x08,
        0x01, 0x00, 0x09, 0x01, 0x16, 0x0a, 0x01, 0x01,
        0x0b, 0x01, 0x01, 0x0c, 0x01, 0x01, 0x0d, 0x02,
        0x08, 0x00, 0x0e, 0x01, 0x01, 0x05, 0x2f, 0x03,
        0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x03, 0x02,
        0x01, 0x80, 0x04, 0x02, 0x00, 0x06, 0x05, 0x01,
        0x05, 0x06, 0x01, 0x22, 0x07, 0x02, 0x01, 0x52,
        0x08, 0x01, 0x00, 0x09, 0x01, 0x30, 0x0a, 0x01,
        0x01, 0x0b, 0x01, 0x01, 0x0c, 0x01, 0x01, 0x0d,
        0x02, 0x08, 0x00, 0x0e, 0x01, 0x01, 0x05, 0x2f,
        0x04, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x03,
        0x02, 0x01, 0x80, 0x04, 0x02, 0x00, 0x06, 0x05,
        0x01, 0x05, 0x06, 0x01, 0x22, 0x07, 0x02, 0x01,
        0x52, 0x08, 0x01, 0x00, 0x09, 0x01, 0x30, 0x0a,
        0x01, 0x01, 0x0b, 0x01, 0x01, 0x0c, 0x01, 0x01,
        0x0d, 0x02, 0x08, 0x00, 0x0e, 0x01, 0x01, 0x05,
        0x2f, 0x09, 0x01, 0x01, 0x05, 0x02, 0x01, 0x02,
        0x03, 0x02, 0x00, 0x40, 0x04, 0x02, 0x01, 0x8c,
        0x05, 0x01, 0x06, 0x06, 0x01, 0x4c, 0x07, 0x02,
        0x01, 0x52, 0x08, 0x01, 0x06, 0x09, 0x01, 0x16,
        0x0a, 0x01, 0x02, 0x0b, 0x01, 0x01, 0x0c, 0x01,
        0x01, 0x0d, 0x02, 0x08, 0x00, 0x0e, 0x01, 0x02,
        0x05, 0x2f, 0x0a, 0x01, 0x01, 0x05, 0x02, 0x01,
        0x02, 0x03, 0x02, 0x00, 0x40, 0x04, 0x02, 0x01,
        0x8c, 0x05, 0x01, 0x09, 0x06, 0x01, 0xe8, 0x07,
        0x02, 0x01, 0x52, 0x08, 0x01, 0x00, 0x09, 0x01,
        0x16, 0x0a, 0x01, 0x02, 0x0b, 0x01, 0x01, 0x0c,
        0x01, 0x01, 0x0d, 0x02, 0x08, 0x00, 0x0e, 0x01,
        0x02, 0x05, 0x2f, 0x0b, 0x01, 0x01, 0x05, 0x02,
        0x01, 0x02, 0x03, 0x02, 0x00, 0x40, 0x04, 0x02,
        0x01, 0x8c, 0x05, 0x01, 0x09, 0x06, 0x01, 0xe8,
        0x07, 0x02, 0x01, 0x52, 0x08, 0x01, 0x24, 0x09,
        0x01, 0x16, 0x0a, 0x01, 0x02, 0x0b, 0x01, 0x01,
        0x0c, 0x01, 0x01, 0x0d, 0x02, 0x08, 0x00, 0x0e,
        0x01, 0x02
    ]),
]
data_ntf = []

X = int(os.getenv("X", "1"))
ENABLE_FUZZING = int(os.getenv("ENABLE_FUZZING", "0"))


class TestFastDecode(unittest.TestCase):
    def test_fast_decode(self):
        for _ in range(0, X):
            for buf in data_ira:
                rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_IRA
                rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
                rcp_seq.buffer = buf
                parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]
                parent_gpb = config()
                ret = rcp_seq._fast_decode(parent_fmt, parent_gpb, 0, len(buf), 0)
                self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

            for buf in data_rex:
                rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_REX
                rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
                rcp_seq.buffer = buf
                parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]
                parent_gpb = config()
                ret = rcp_seq._fast_decode(parent_fmt, parent_gpb, 0, len(buf), 0)
                self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

    def test_fast_decode2(self):
        for _ in range(0, X):
            for buf in data_ira:
                rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_IRA
                rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
                rcp_seq.buffer = buf
                parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]
                parent_gpb = config()
                ret = rcp_seq._fast_decode2(parent_fmt, parent_gpb, 0, len(buf), 0)
                self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

            for buf in data_rex:
                rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_REX
                rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
                rcp_seq.buffer = buf
                parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]
                parent_gpb = config()
                ret = rcp_seq._fast_decode2(parent_fmt, parent_gpb, 0, len(buf), 0)
                self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

    def test_compare_fast_decode_and_fast_decode2(self):
        for buf in data_ira:
            rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_IRA
            rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
            rcp_seq.buffer = buf
            parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]

            parent_gpb = config()
            parent_gpb2 = config()
            self.assertEqual(parent_gpb, parent_gpb2)

            ret = rcp_seq._fast_decode(parent_fmt, parent_gpb, 0, len(buf), 0)
            self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)
            ret = rcp_seq._fast_decode2(parent_fmt, parent_gpb2, 0, len(buf), 0)
            self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

            self.assertEqual(parent_gpb, parent_gpb2)

        for buf in data_rex:
            rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_REX
            rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
            rcp_seq.buffer = buf
            parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]

            parent_gpb = config()
            parent_gpb2 = config()
            self.assertEqual(parent_gpb, parent_gpb2)

            ret = rcp_seq._fast_decode(parent_fmt, parent_gpb, 0, len(buf), 0)
            self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)
            ret = rcp_seq._fast_decode2(parent_fmt, parent_gpb2, 0, len(buf), 0)
            self.assertEqual(ret, gcp_object.GCPObject.DECODE_DONE)

            self.assertEqual(parent_gpb, parent_gpb2)

    # The test_fuzzing_fast_decode2 is naive fuzzing function.
    # In will take real dump and mutate it in a loop.
    # This shall cause problems with T, L, and V, format and target object.
    def test_fuzzing_fast_decode2(self):
        if ENABLE_FUZZING <= 0:
            return
        class Logger:
            def error(self, *args):
                pass
            def warn(self, *args):
                pass

        for n in [0, 0xFF] + range(1, 0xFE): # run edge cases, then intermediate values
            for ref_data in data_ira + data_rex + data_ntf:
                l = len(ref_data)
                for i in reversed(range(0, l)):
                    buf = ref_data[:]  # copy data
                    buf[i] = n         # mutate

                    # Decode
                    rcp_message_id = rcp_tlv_def.RCP_MSG_TYPE_REX
                    rcp_seq = RCPSequence(gcp_msg_def.ManagementREQ, rcp_message_id, 0, rcp_tlv_def.RCP_OPERATION_TYPE_NONE)
                    rcp_seq.buffer = buf
                    rcp_seq.logger = Logger()
                    parent_fmt = rcp_tlv_def.RCP_SEQ_RCP_MSG_TLV_SET_MAPPING[rcp_message_id]
                    parent_gpb = config()
                    #print(n, i)
                    ret = rcp_seq._fast_decode2(parent_fmt, parent_gpb, 0, len(buf), 0)
                    #if ret is gcp_object.GCPObject.DECODE_FAILED:
                    #   print(n, i)
                    self.assertTrue(ret in [gcp_object.GCPObject.DECODE_DONE, gcp_object.GCPObject.DECODE_FRAGMENTED])

if __name__ == '__main__':
    unittest.main()
